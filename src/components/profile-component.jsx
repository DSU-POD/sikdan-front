/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ueGEawQOiOs
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Image from "next/image"; // next/image 가져오기
import { useState, useEffect } from "react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";
import { Button } from "@/components/ui/button"; // Button 컴포넌트 가져오기
import { api } from "@/modules/api.module";
import { useRouter } from "next/router"; // 페이지 이동을 위해 추가
import ExpertBadgeComponent from "./ui/expert-badge";

export default function ProfileComponent() {
  const [userInfo, setUserInfo] = useState({
    nickname: "",
    email: "",
    feedCount: 0,
    verified: false,
    memberFeed: [],
  });
  const router = useRouter(); // useRouter 훅을 사용하여 페이지 이동

  // 사용자 정보를 불러오는 함수
  const getUserInfo = async () => {
    try {
      const response = await api.get("/member/info");
      console.log(response);

      if (response?.result === "success") {
        const { nickname, email, feedCount, verified, profileMessage, memberFeed } = response.data;
        setUserInfo({
          nickname,
          email,
          feedCount,
          verified,
          profileMessage: profileMessage || "저는 운동을 사랑하는 전문 트레이너 입니다.",
          memberFeed,
        });
      }
    } catch (error) {
      console.error("사용자 정보를 불러오는 중 오류 발생:", error);
      alert("사용자 정보를 가져오는 중 오류가 발생했습니다.");
    }
  };

  useEffect(() => {
    getUserInfo();
  }, []);

  // 정보 수정 페이지로 이동하는 함수
  const handleEditProfile = () => {
    router.push("/member/profile/edit"); // 정보 수정 페이지로 이동
  };

  return (
    <div className="w-full mx-auto max-w-2xl">
      <div className="bg-white dark:bg-gray-950 rounded-lg overflow-hidden shadow">
        {/* 상단 영역: 아바타와 정보 수정 버튼 */}
        <div className="p-4 flex items-center justify-between md:p-6">
          <div className="flex items-center gap-4">
            <Avatar className="w-12 h-12 border-2 border-white dark:border-gray-950 md:w-16 md:h-16">
              <AvatarFallback>{userInfo.nickname ? userInfo.nickname.substring(0, 2) : ""}</AvatarFallback>
            </Avatar>
            <div className="flex-1 grid gap-1 md:gap-2">
              <div className="flex items-center gap-2 md:gap-3">
                <h2 className="text-base font-bold md:text-lg">{userInfo.nickname || "닉네임 없음"}</h2>
                {userInfo.trainer_yn === "expert" ? <ExpertBadgeComponent /> : ""}
                {userInfo.verified && (
                  <div className="ml-auto flex items-center gap-2">
                    <div className="bg-blue-500 rounded-full px-2 py-1 text-white text-xs font-medium flex items-center gap-1 md:px-3 md:py-1.5 md:text-sm">
                      Verified
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* 정보 수정 버튼 */}
          <Button
            variant="outline"
            className="bg-white text-gray-700 border-gray-300 hover:bg-gray-100"
            onClick={handleEditProfile}
          >
            정보 수정
          </Button>
        </div>

        <Separator />

        {/* 사용자 피드 연동 (작은 썸네일 형태로 표시) */}
        <div className="p-4 grid grid-cols-3 gap-2">
          {userInfo.memberFeed && userInfo.memberFeed?.length > 0 ? (
            userInfo.memberFeed?.map((feed) => (
              <div key={feed.id} className="relative cursor-pointer">
                <img
                  src={feed.feedDiet?.url}
                  alt="Post"
                  layout="responsive"
                  width={100}
                  height={100}
                  className="rounded-md"
                  onClick={() => router.push(`/main/feed/${feed.id}`)}
                />
              </div>
            ))
          ) : (
            <p className="text-sm text-gray-500 col-span-3">아직 작성된 피드가 없습니다.</p>
          )}
        </div>
      </div>
    </div>
  );
}
